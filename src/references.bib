@conference{4026885,
    author={W. Vogels},
    booktitle={IEEE International Conference on Services Computing (SCC'06)},
    title={Web Services at Amazon.com},
    year={2006},
    pages={xxii-xxii},
    keywords={Distributed computing, Technological innovation, Web services},
    doi={10.1109/SCC.2006.116},
    month={Sept}
}
@online{perrin2008,
    author={C. Perrin},
    title={The CIA Triad},
    year={2008},
    url={http://www.techrepublic.com/blog/it-security/the-cia-triad/},
    urldate={2017-04-12}
}
@book{parker1998,
    place={New York},
    title={Fighting Computer Crime: a New Framework for Protecting Information},
    publisher={John Wiley \& Sons},
    author={Donn B. Parker},
    year={1998}
}
@book{kizza2015,
    edition = {3rd},
    title = {Guide to {{Computer Network Security}}},
    isbn = {978-1-4471-6653-5},
    abstract = {This fully updated new edition explores the security issues, vulnerabilities and dangers encountered by the users of modern computing and communication devices, highlighting the need to develop improved algorithms, protocols, and best practices to enhance the security of public, private and enterprise systems alike. Features: introduces the fundamentals of traditional computer networks and the security threats they face; discusses the security challenges introduced by virtualization software, cloud computing and mobile systems; examines the security quagmire presented by the home computing environment; raises important legislative, legal, social, technical and ethical security issues, including the tension between the needs of individual privacy and collective security; provides both quickly workable and more thought-provoking exercises at the end of each chapter, with one chapter devoted entirely to lab exercises; supplies additional support material for instructors at an associated website.},
    timestamp = {2017-05-10T07:28:36Z},
    publisher = {{Springer Publishing Company, Incorporated}},
    author = {Kizza, Joseph Migga},
    year = {2015},
    file = {Guide-to-Computer-Network-Security-3rd-Edition-2015.pdf:/media/Fikri/TA/storage/QJT6BUQI/Guide-to-Computer-Network-Security-3rd-Edition-2015.pdf:application/pdf}
}
@misc{owasp2013,
    year={2013},
    title={OWASP Top 10 2013},
    url={https://www.owasp.org/index.php/Top_10_2013-Top_10},
    publisher={OWASP}
}
@misc{snort,
    title={Snort Users Manual},
    url={http://manual-snort-org.s3-website-us-east-1.amazonaws.com/},
    note={The Snort Project vol. 2.9.8.2},
    month=nov,
    year={2016},
    urldate={2017-03-22},
    publisher={Cisco}
}
@inproceedings{pcre2007,
    author = {Mitra, Abhishek and Najjar, Walid and Bhuyan, Laxmi},
    title = {Compiling PCRE to FPGA for Accelerating SNORT IDS},
    booktitle = {Proceedings of the 3rd ACM/IEEE Symposium on Architecture for Networking and Communications Systems},
    series = {ANCS '07},
    year = {2007},
    isbn = {978-1-59593-945-6},
    location = {Orlando, Florida, USA},
    pages = {127-136},
    numpages = {10},
    url = {http://doi.acm.org/10.1145/1323548.1323571},
    doi = {10.1145/1323548.1323571},
    acmid = {1323571},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {deep payload inspection, intrusion detection system, nondeterministic finite automata, regular expressions},
} 
@inproceedings{multi2004,
    author = {Haagdorens, Bart and Vermeiren, Tim and Goossens, Marnix},
    title = {Improving the Performance of Signature-based Network Intrusion Detection Sensors by Multi-threading},
    booktitle = {Proceedings of the 5th International Conference on Information Security Applications},
    series = {WISA'04},
    year = {2005},
    isbn = {3-540-24015-2, 978-3-540-24015-0},
    location = {Jeju Island, Korea},
    pages = {188--203},
    numpages = {16},
    url = {http://dx.doi.org/10.1007/978-3-540-31815-6_16},
    doi = {10.1007/978-3-540-31815-6_16},
    acmid = {2144568},
    publisher = {Springer-Verlag},
    address = {Berlin, Heidelberg},
}
@article{bellekens2014,
    title = {A {{Highly}}-{{Efficient Memory}}-{{Compression Scheme}} for {{GPU}}-{{Accelerated Intrusion Detection Systems}}},
    doi = {10.1145/2659651.2659723},
    abstract = {Pattern Matching is a computationally intensive task used in many research fields and real world applications. Due to the ever-growing volume of data to be processed, and increasing link speeds, the number of patterns to be matched has risen significantly. In this paper we explore the parallel capabilities of modern General Purpose Graphics Processing Units (GPGPU) applications for high speed pattern matching. A highly compressed failure-less Aho-Corasick algorithm is presented for Intrusion Detection Systems on off-the-shelf hardware. This approach maximises the bandwidth for data transfers between the host and the Graphics Processing Unit (GPU). Experiments are performed on multiple alphabet sizes, demonstrating the capabilities of the library to be used in different research fields, while sustaining an adequate throughput for intrusion detection systems or DNA sequencing. The work also explores the performance impact of adequate prefix matching for alphabet sizes and varying pattern numbers achieving speeds up to 8Gbps and low memory consumption for intrusion detection systems.},
    timestamp = {2017-05-13T12:12:43Z},
    archivePrefix = {arXiv},
    eprinttype = {arxiv},
    eprint = {1704.02272},
    primaryClass = {cs},
    urldate = {2017-05-13},
    journal = {arXiv:1704.02272 [cs]},
    author = {Bellekens, Xavier and Tachtatzis, Christos and Atkinson, Robert and Renfrew, Craig and Kirkham, Tony},
    year = {2014},
    keywords = {Computer Science - Cryptography and Security,Computer Science - Distributed; Parallel; and Cluster Computing,D.4.6,K.6.5},
    pages = {302--309},
    annote = {Comment: Published in The 7th International Conference of Security of Information and Networks, SIN 2014, Glasgow, UK, September, 2014},
    file = {1704.02272.pdf:/media/Fikri/TA/storage/MT8996DD/1704.02272.pdf:application/pdf}
}
@inproceedings{khamphakdee2014,
    title = {Improving {{Intrusion Detection System}} Based on {{Snort}} Rules for Network Probe Attack Detection},
    doi = {10.1109/ICoICT.2014.6914042},
    abstract = {Data and network system security is the most important roles. An organization should find the methods to protect their data and network system to reduce the risk from attacks. Snort Intrusion Detection System (Snort-IDS) is a security tool of network security. It has been widely used for protecting the network of the organizations. The Snort-IDS utilize the rules to matching data packets traffic. If some packet matches the rules, Snort-IDS will generate the alert messages. However, Snort-IDS contain many rules and it also generates a lot of false alerts. In this paper, we present the procedure to improve the Snort-IDS rules for the network probe attack detection. In order to test the performance evaluation, we utilized the data set from the MIT-DAPRA 1999, which includes the normal and abnormal traffics. Firstly, we analyzed and explored the existing the Snort-IDS rules to improve the proposed Snort-IDS rules. Secondly, we applied the WireShark software to analyze data packets form of attack in data set. Finally, the Snort-IDS was improved, and it can detect the network probe attack. This paper, we had classified the attacks into several groups based on the nature of network probe attack. In addition, we also compared the efficacy of detection attacks between Snort-IDS rules to be updated with the Detection Scoring Truth. As the experimental results, the proposed Snort-IDS efficiently detected the network probe attacks compared to the Detection Scoring Truth. It can achieve higher accuracy. However, there were some detecting alert that occur over the attack in Detection Scoring Truth, because some attack occur in several time but the Detection Scoring Truth indentify as one time.},
    timestamp = {2017-05-10T17:40:34Z},
    booktitle = {2014 2nd {{International Conference}} on {{Information}} and {{Communication Technology}} ({{ICoICT}})},
    author = {Khamphakdee, N. and Benjamas, N. and Saiyod, S.},
    month = may,
    year = {2014},
    keywords = {abnormal traffics,alert messages,Communication networks,computer network security,data analysis,data packet analysis,data packet traffic matching,detection scoring truth,false alerts,intrusion detection,Intrusion Detection System (IDS),MIT-DAPRA,Network probe attack,network probe attack detection,network protection,network security,network system security,normal traffics,performance evaluation,Ports (Computers),Probes,Protocols,Snort-IDS,Snort-IDS rule,Snort intrusion detection system,WireShark software},
    pages = {69--74}
}
@inproceedings{kargus2012,
    address = {New York, NY, USA},
    series = {CCS '12},
    title = {Kargus: {{A Highly}}-Scalable {{Software}}-Based {{Intrusion Detection System}}},
    isbn = {978-1-4503-1651-4},
    shorttitle = {Kargus},
    doi = {10.1145/2382196.2382232},
    abstract = {As high-speed networks are becoming commonplace, it is increasingly challenging to prevent the attack attempts at the edge of the Internet. While many high-performance intrusion detection systems (IDSes) employ dedicated network processors or special memory to meet the demanding performance requirements, it often increases the cost and limits functional flexibility. In contrast, existing software-based IDS stacks fail to achieve a high throughput despite modern hardware innovations such as multicore CPUs, manycore GPUs, and 10 Gbps network cards that support multiple hardware queues. We present Kargus, a highly-scalable software-based IDS that exploits the full potential of commodity computing hardware. First, Kargus batch processes incoming packets at network cards and achieves up to 40 Gbps input rate even for minimum-sized packets. Second, it exploits high processing parallelism by balancing the pattern matching workloads with multicore CPUs and heterogeneous GPUs, and benefits from extensive batch processing of multiple packets per each IDS function call. Third, Kargus adapts its resource usage depending on the input rate, significantly saving the power in a normal situation. Our evaluation shows that Kargus on a 12-core machine with two GPUs handles up to 33 Gbps of normal traffic and achieves 9 to 10 Gbps even when all packets contain attack signatures, a factor of 1.9 to 4.3 performance improvements over the existing state-of-the-art software IDS. We design Kargus to be compatible with the most popular software IDS, Snort.},
    timestamp = {2017-05-10T06:38:10Z},
    urldate = {2017-05-10},
    booktitle = {Proceedings of the 2012 {{ACM Conference}} on {{Computer}} and {{Communications Security}}},
    publisher = {{ACM}},
    author = {Jamshed, Muhammad Asim and Lee, Jihyung and Moon, Sangwoo and Yun, Insu and Kim, Deokjin and Lee, Sungryoul and Yi, Yung and Park, KyoungSoo},
    year = {2012},
    keywords = {batch processing,GPU,intrusion detection,pattern matching},
    pages = {317--328},
    file = {ACM Full Text PDF:/media/Fikri/TA/storage/M3GDXX8K/Jamshed et al. - 2012 - Kargus A Highly-scalable Software-based Intrusion.pdf:application/pdf}
}
@inproceedings{4482891, 
    title = {A {{GPU}}-{{Based Multiple}}-{{Pattern Matching Algorithm}} for {{Network Intrusion Detection Systems}}},
    doi = {10.1109/WAINA.2008.145},
    abstract = {By the development of network applications, network security issues are getting more and more important. This paper proposes a multiple-pattern matching algorithm for the network intrusion detection systems based on the GPU (Graphics Processing Units). The highly parallelism of the GPU computation power is used to inspect the packet content in parallel. The performance of the proposed approach is analyzed through evaluations such as using various texture formats and different implementations. Experimental results indicate that the performance of the proposed approach is twice of that of the modified Wu-Manber algorithm used in Snort. The proposed approach makes a commodity and cheap GPU card as a high performance pattern matching co-processor.},
    timestamp = {2017-05-10T07:21:50Z},
    booktitle = {22nd {{International Conference}} on {{Advanced Information Networking}} and {{Applications}} - {{Workshops}} (Aina Workshops 2008)},
    author = {Huang, N. F. and Hung, H. W. and Lai, S. H. and Chu, Y. M. and Tsai, W. Y.},
    month = mar,
    year = {2008},
    keywords = {Application software,Communication system security,Computer graphics,Computer science,Concurrent computing,Coprocessors,GPU,GPU computation power,graphics processing unit,IDS,intrusion detection,multiple pattern matching algorithm,network application,network intrusion detection system,network security,packet content,Parallel processing,pattern match,pattern matching,pattern matching coprocessor,Power engineering and energy,security of data,texture format},
    pages = {62--67},
    file = {huang2008.pdf:/media/Fikri/TA/storage/FWSKZFCA/huang2008.pdf:application/pdf;IEEE Xplore Abstract Record:/media/Fikri/TA/storage/NK2NUH65/4482891.html:text/html}
}
@article{fpga2008,
    title={An FPGA-Based Network Intrusion Detection Architecture},
    volume={3}, number={1},
    pages={118-132},
    month=mar,
    doi={10.1109/tifs.2007.916288},
    journal={IEEE Transactions on Information Forensics and Security},
    author={Das, Abhishek and Nguyen, David and Zambreno, Joseph and Memik, Gokhan and Choudhary, Alok},
    year={2008}
}
@inproceedings{gnort2008,
    title = {Gnort: {{High Performance Network Intrusion Detection Using Graphics Processors}}},
    shorttitle = {Gnort},
    doi = {10.1007/978-3-540-87403-4_7},
    abstract = {The constant increase in link speeds and number of threats poses challenges to network intrusion detection systems (NIDS), which must cope with higher traffic throughput and perform even more complex per-packet processing. In this paper, we present an intrusion detection system based on the Snort open-source NIDS that exploits the underutilized computational power of modern graphics cards to offload the costly pattern matching operations from the CPU, and thus increase the overall processing throughput. Our prototype system, called Gnort, achieved a maximum traffic processing throughput of 2.3 Gbit/s using synthetic network traces, while when monitoring real traffic using a commodity Ethernet interface, it outperformed unmodified Snort by a factor of two. The results suggest that modern graphics cards can be used effectively to speed up intrusion detection systems, as well as other systems that involve pattern matching operations.},
    language = {en},
    timestamp = {2017-05-09T10:56:35Z},
    urldate = {2017-05-09},
    booktitle = {Recent {{Advances}} in {{Intrusion Detection}}},
    publisher = {{Springer, Berlin, Heidelberg}},
    author = {Vasiliadis, Giorgos and Antonatos, Spiros and Polychronakis, Michalis and Markatos, Evangelos P. and Ioannidis, Sotiris},
    month = sep,
    year = {2008},
    pages = {116--134},
    file = {Full Text PDF:/media/Fikri/TA/storage/N74TBKFK/Vasiliadis et al. - 2008 - Gnort High Performance Network Intrusion Detectio.pdf:application/pdf;Snapshot:/media/Fikri/TA/storage/7JCCHRDV/978-3-540-87403-4_7.html:text/html}
}
@techreport{nist2007, 
    address = {Gaithersburg, MD, United States},
    title = {{{SP}} 800-94. {{Guide}} to {{Intrusion Detection}} and {{Prevention Systems}} ({{IDPS}})},
    abstract = {The National Institute of Standards and Technology (NIST) developed this document in furtherance of its statutory responsibilities under the Federal Information Security Management Act (FISMA) of 2002, Public Law 107-347. This publication seeks to assist organizations in understanding intrusion detection system (IDS) and intrusion prevention system (IPS) technologies and in designing, implementing, configuring, securing, monitoring, and maintaining intrusion detection and prevention systems (IDPS). It provides practical, real-world guidance for each of four classes of IDPS: network-based, wireless, network behavior analysis software, and host-based. The publication also provides an overview of complementary technologies that can detect intrusions, such as security information and event management software. It focuses on enterprise IDPS, but most of the information in the publication is also applicable to standalone and small-scale IDPS deployments.},
    timestamp = {2017-05-10T09:26:59Z},
    institution = {National Institute of Standards \& Technology},
    author = {Scarfone, Karen A. and Mell, Peter M.},
    year = {2007},
    file = {nistspecialpublication800-94.pdf:/media/Fikri/TA/storage/QCU3IJFU/nistspecialpublication800-94.pdf:application/pdf}
}
@inproceedings{Sommer:2003:EBN:948109.948145,
    author = {Sommer, Robin and Paxson, Vern},
    title = {Enhancing Byte-level Network Intrusion Detection Signatures with Context},
    booktitle = {Proceedings of the 10th ACM Conference on Computer and Communications Security},
    series = {CCS '03},
    year = {2003},
    isbn = {1-58113-738-9},
    location = {Washington D.C., USA},
    pages = {262-271},
    numpages = {10},
    url = {http://doi.acm.org/10.1145/948109.948145},
    doi = {10.1145/948109.948145},
    acmid = {948145},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {bro, evaluation, network intrusion detection, pattern matching, security, signatures, snort},
}
@article{lin2013,
    title = {Accelerating {{Pattern Matching Using}} a {{Novel Parallel Algorithm}} on {{GPUs}}},
    volume = {62},
    issn = {0018-9340},
    doi = {10.1109/TC.2012.254},
    abstract = {Graphics processing units (GPUs) have attracted a lot of attention due to their cost-effective and enormous power for massive data parallel computing. In this paper, we propose a novel parallel algorithm for exact pattern matching on GPUs. A traditional exact pattern matching algorithm matches multiple patterns simultaneously by traversing a special state machine called an Aho-Corasick machine. Considering the particular parallel architecture of GPUs, in this paper, we first propose an efficient state machine on which we perform very efficient parallel algorithms. Also, several techniques are introduced to do optimization on GPUs, including reducing global memory transactions of input buffer, reducing latency of transition table lookup, eliminating output table accesses, avoiding bank-conflict of shared memory, coalescing writes to global memory, and enhancing data transmission via peripheral component interconnect express. We evaluate the performance of the proposed algorithm using attack patterns from Snort V2.8 and input streams from DEFCON. The experimental results show that the proposed algorithm performed on NVIDIA GPUs achieves up to 143.16-Gbps throughput, 14.74 times faster than the Aho-Corasick algorithm implemented on a 3.06-GHz quad-core CPU with the OpenMP. The library of the proposed algorithm is publically accessible through Google Code.},
    timestamp = {2017-05-10T15:22:50Z},
    number = {10},
    urldate = {2017-05-10},
    journal = {IEEE Trans. Comput.},
    author = {Lin, Cheng-Hung and Liu, Chen-Hsiung and Chien, Lung-Sheng and Chang, Shih-Chieh},
    month = oct,
    year = {2013},
    keywords = {Acceleration,Aho-Corasick,Algorithm design and analysis,Complexity theory,graphics processing unit,Graphics processing units,Instruction sets,parallel algorithm,pattern matching,Vectors},
    pages = {1906--1916},
    file = {lin2013.pdf:/media/Fikri/TA/storage/2F4WKH9R/lin2013.pdf:application/pdf}
}
@article{ahoc1975,
    author = {Aho, Alfred V. and Corasick, Margaret J.},
    title = {Efficient String Matching: An Aid to Bibliographic Search},
    journal = {Communications of the ACM},
    issue_date = {June 1975},
    volume = {18},
    number = {6},
    month = jun,
    year = {1975},
    issn = {0001-0782},
    pages = {333-340},
    numpages = {8},
    url = {http://doi.acm.org/10.1145/360825.360855},
    doi = {10.1145/360825.360855},
    acmid = {360855},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {bibliographic search, computational complexity, finite state machines, information retrieval, keywords and phrases, string pattern matching, text-editing},
}
@inproceedings{trie59,
    author = {De La Briandais, Rene},
    title = {File Searching Using Variable Length Keys},
    booktitle = {Papers Presented at the the March 3-5, 1959, Western Joint Computer Conference},
    series = {IRE-AIEE-ACM '59 (Western)},
    year = {1959},
    location = {San Francisco, California},
    pages = {295-298},
    numpages = {4},
    url = {http://doi.acm.org/10.1145/1457838.1457895},
    doi = {10.1145/1457838.1457895},
    acmid = {1457895},
    publisher = {ACM},
    address = {New York, NY, USA},
} 
@article{sundaram1996,
    author = {Sundaram, Aurobindo},
    title = {An Introduction to Intrusion Detection},
    journal = {Crossroads},
    issue_date = {March 1996},
    volume = {2},
    number = {4},
    month = apr,
    year = {1996},
    issn = {1528-4972},
    pages = {3--7},
    numpages = {5},
    url = {http://doi.acm.org/10.1145/332159.332161},
    doi = {10.1145/332159.332161},
    acmid = {332161},
    publisher = {ACM},
    address = {New York, NY, USA},
} 
@book{stateful2009,
    author = {Foschini, Luca},
    title = {Stateful Intrusion Detection in High-speed Networks: A Formalization and Analysis of High-speed Stateful Signature Matching for Intrusion Detection},
    year = {2009},
    isbn = {3639192451, 9783639192452},
    publisher = {VDM Verlag},
    address = {Saarbr\&\#252;cken, Germany, Germany},
} 
@inproceedings{proudfoot2001,
    author = {Proudfoot, Kekoa and Mark, William R. and Tzvetkov, Svetoslav and Hanrahan, Pat},
    title = {A Real-time Procedural Shading System for Programmable Graphics Hardware},
    booktitle = {Proceedings of the 28th Annual Conference on Computer Graphics and Interactive Techniques},
    series = {SIGGRAPH '01},
    year = {2001},
    isbn = {1-58113-374-X},
    pages = {159--170},
    numpages = {12},
    url = {http://doi.acm.org/10.1145/383259.383275},
    doi = {10.1145/383259.383275},
    acmid = {383275},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {graphics hardware, graphics systems, rendering, shading languages},
} 
@inproceedings{lugpu2005,
    author = {Galoppo, Nico and Govindaraju, Naga K. and Henson, Michael and Manocha, Dinesh},
    title = {LU-GPU: Efficient Algorithms for Solving Dense Linear Systems on Graphics Hardware},
    booktitle = {Proceedings of the 2005 ACM/IEEE Conference on Supercomputing},
    series = {SC '05},
    year = {2005},
    isbn = {1-59593-061-2},
    pages = {3--},
    url = {https://doi.org/10.1109/SC.2005.42},
    doi = {10.1109/SC.2005.42},
    acmid = {1105768},
    publisher = {IEEE Computer Society},
    address = {Washington, DC, USA},
}
@inproceedings{matrix2001,
    author = {Larsen, E. Scott and McAllister, David},
    title = {Fast Matrix Multiplies Using Graphics Hardware},
    booktitle = {Proceedings of the 2001 ACM/IEEE Conference on Supercomputing},
    series = {SC '01},
    year = {2001},
    isbn = {1-58113-293-X},
    location = {Denver, Colorado},
    pages = {55--55},
    numpages = {1},
    url = {http://doi.acm.org/10.1145/582034.582089},
    doi = {10.1145/582034.582089},
    acmid = {582089},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {graphics hardware, matrix multiplication},
}
@inproceedings{phys2002,
    author = {Harris, Mark J. and Coombe, Greg and Scheuermann, Thorsten and Lastra, Anselmo},
    title = {Physically-based Visual Simulation on Graphics Hardware},
    booktitle = {Proceedings of the ACM SIGGRAPH/EUROGRAPHICS Conference on Graphics Hardware},
    series = {HWWS '02},
    year = {2002},
    isbn = {1-58113-580-7},
    location = {Saarbrucken, Germany},
    pages = {109--118},
    numpages = {10},
    url = {http://dl.acm.org/citation.cfm?id=569046.569061},
    acmid = {569061},
    publisher = {Eurographics Association},
    address = {Aire-la-Ville, Switzerland, Switzerland},
    keywords = {CML, coupled map lattice, graphics hardware, multipass rendering, reaction-diffusion, visual simulation},
}
@phdthesis{harris2003,
    author = {Harris, Mark J.},
    title = {Real-time Cloud Simulation and Rendering},
    year = {2003},
    note = {AAI3112020},
    publisher = {The University of North Carolina at Chapel Hill},
}
@inproceedings{lindholm2001,
    author = {Lindholm, Erik and Kilgard, Mark J. and Moreton, Henry},
    title = {A User-programmable Vertex Engine},
    booktitle = {Proceedings of the 28th Annual Conference on Computer Graphics and Interactive Techniques},
    series = {SIGGRAPH '01},
    year = {2001},
    isbn = {1-58113-374-X},
    pages = {149--158},
    numpages = {10},
    url = {http://doi.acm.org/10.1145/383259.383274},
    doi = {10.1145/383259.383274},
    acmid = {383274},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {graphics hardware, graphics systems},
} 
@misc{cuda,
    title = {CUDA Toolkit Documentation},
    pages = {19},
    note = {\emph{nVidia Developer Zone - CUDA C Programming Guide v8.0}. Section 3.1.5},
    year = {2017},
    month = jan,
    url={http://docs.nvidia.com/cuda/pdf/CUDA_C_Programming_Guide.pdf},
    urldate = {2017-03-22},
}
@misc{snortfaq,
    title={Snort Frequently Asked Questions},
    url={https://www.snort.org/faq.html},
    note={The Snort Project vol. 2.9.8.2},
    year={2016},
    urldate={2017-03-22},
    publisher={Cisco}
}
@inproceedings{5358130, 
    author={E. Azimi and M. B. Ghaznavi-Ghoushchi and A. M. Rahmani}, 
    booktitle={2009 IEEE International Conference on Intelligent Computing and Intelligent Systems}, 
    title={Implementation of simple SNORT processor for efficient Intrusion Detection systems}, 
    year={2009}, 
    volume={3}, 
    pages={533-537}, 
    keywords={application specific integrated circuits, field programmable gate arrays, hardware description languages, operating systems (computers), security of data, CMOS technology, SNORT software, Verilog hardware description language, Virtex5 FPGA, application specific integrated circuit, field programmable gate array, hardware accelerator systems, intrusion detection systems, size 65 nm, size 90 nm, Application specific integrated circuits, Computer networks, Field programmable gate arrays, Hardware design languages, Intrusion detection, Network synthesis, Open source software, Operating systems, Pattern matching, Software systems, ASIC, FPGA, hardware accelerators, hardware description languges, network intrusion detection systems, snort}, 
    doi={10.1109/ICICISYS.2009.5358130}, 
    month=nov,
}
@article{wu92,
    title = {Fast {{Text Searching}}: {{Allowing Errors}}},
    volume = {35},
    issn = {0001-0782},
    shorttitle = {Fast {{Text Searching}}},
    doi = {10.1145/135239.135244},
    timestamp = {2017-05-10T07:27:49Z},
    number = {10},
    urldate = {2017-05-10},
    journal = {Commun. ACM},
    author = {Wu, Sun and Manber, Udi},
    month = oct,
    year = {1992},
    keywords = {approximate string matching,information retrieval,pattern matching,software tools,string searching},
    pages = {83--91},
    file = {ACM Full Text PDF:/media/Fikri/TA/storage/SEXR7V3G/Wu and Manber - 1992 - Fast Text Searching Allowing Errors.pdf:application/pdf}
}
@inproceedings{albin2012,
    address = {Washington, DC, USA},
    series = {WAINA '12},
    title = {A {{Realistic Experimental Comparison}} of the {{Suricata}} and {{Snort Intrusion}}-{{Detection Systems}}},
    isbn = {978-0-7695-4652-0},
    doi = {10.1109/WAINA.2012.29},
    abstract = {The Suricata intrusion-detection system for computer-network monitoring has been advanced as an open-source improvement on the popular Snort system that has been available for over a decade. Suricata includes multi-threading to improve processing speed beyond Snort. Previous work comparing the two products has not used a real-world setting. We did this and evaluated the speed, memory requirements, and accuracy of the detection engines in three kinds of experiments: (1) on the full traffic of our school as observed on its " backbone" in real time, (2) on a supercomputer with packets recorded from the backbone, and (3) in response to malicious packets sent by a red-teaming product. We used the same set of rules for both products with a few small exceptions where capabilities were missing. We conclude that Suricata can handle larger volumes of traffic than Snort with similar accuracy, and that its performance scaled roughly linearly with the number of processors up to 48. We observed no significant speed or accuracy advantage of Suricata over Snort in its current state, but it is still being developed. Our methodology should be useful for comparing other intrusion-detection products.},
    timestamp = {2017-05-11T16:50:50Z},
    urldate = {2017-05-11},
    booktitle = {Proceedings of the 2012 26th {{International Conference}} on {{Advanced Information Networking}} and {{Applications Workshops}}},
    publisher = {{IEEE Computer Society}},
    author = {Albin, Eugene and Rowe, Neil C.},
    year = {2012},
    keywords = {computer networks,intrusion detection,performance,Snort,Suricata},
    pages = {122--127},
    file = {albin2012.pdf:/media/Fikri/TA/storage/2VFCNBNR/albin2012.pdf:application/pdf}
}
@inproceedings{smith2009,
    title = {Evaluating {{GPUs}} for {{Network Packet Signature Matching}}},
    abstract = {Modern network devices employ deep packet inspection to enable sophisticated services such as intrusion detection, traffic shaping, and load balancing. At the heart of such services is a signature matching engine that must match packet payloads to multiple signatures at line rates. However, the recent transition to complex regular-expression based signatures coupled with ever-increasing network speeds has rapidly increased the performance requirements of signature matching. Solutions to meet these requirements range from hardwarecentric ASIC/FPGA implementations to software implementations using high-performance microprocessors. In this paper, we propose a programmable signature matching system prototyped on an Nvidia G80 GPU. We first present a detailed architectural and microarchitectural analysis, showing that signature matching is well suited for SIMD processing because of regular control flow and parallelism available at the packet level. Next, we examine two approaches for matching signatures: standard deterministic finite automata (DFAs) and extended finite automata (XFAs), which use far less memory than DFAs but require specialized auxiliary memory and small amounts of computation in most states. We implement a fully functional prototype on the SIMD-based G80 GPU. This system out-performs a Pentium4 by up to 9X and a Niagarabased 32-threaded system by up to 2.3X and shows that GPUs are a promising candidate for signature matching. 1.},
    timestamp = {2017-05-11T19:08:49Z},
    booktitle = {Proceedings of the {{International Symposium}} on {{Performance Analysis}} of {{Systems}} and {{Software}} ({{ISPASS}})},
    author = {Smith, Randy and Goyal, Neelam and Ormont, Justin and Sankaralingam, Karthikeyan and Estan, Cristian},
    month = apr,
    year = {2009},
    pages = {175--184},
    file = {smith2009.pdf:/media/Fikri/TA/storage/32SPVXII/smith2009.pdf:application/pdf}
}